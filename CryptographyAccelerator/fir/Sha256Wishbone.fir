;buildInfoPackage: chisel3, version: 3.3.1, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit Sha256Wishbone : 
  module ShiftRegister : 
    input clock : Clock
    input reset : Reset
    output io : {flip input : UInt<32>, flip enable : UInt<1>, flip rev : UInt<1>, flip cyc : UInt<1>, flip tap : UInt<1>, output : UInt<32>[16]}
    
    reg reg : UInt<32>[16], clock @[ShiftRegister.scala 34:18]
    when io.enable : @[ShiftRegister.scala 36:22]
      when io.rev : @[ShiftRegister.scala 37:23]
        reg[0] <= reg[1] @[ShiftRegister.scala 39:24]
        reg[1] <= reg[2] @[ShiftRegister.scala 39:24]
        reg[2] <= reg[3] @[ShiftRegister.scala 39:24]
        reg[3] <= reg[4] @[ShiftRegister.scala 39:24]
        reg[4] <= reg[5] @[ShiftRegister.scala 39:24]
        reg[5] <= reg[6] @[ShiftRegister.scala 39:24]
        reg[6] <= reg[7] @[ShiftRegister.scala 39:24]
        reg[7] <= reg[8] @[ShiftRegister.scala 39:24]
        reg[8] <= reg[9] @[ShiftRegister.scala 39:24]
        reg[9] <= reg[10] @[ShiftRegister.scala 39:24]
        reg[10] <= reg[11] @[ShiftRegister.scala 39:24]
        reg[11] <= reg[12] @[ShiftRegister.scala 39:24]
        reg[12] <= reg[13] @[ShiftRegister.scala 39:24]
        reg[13] <= reg[14] @[ShiftRegister.scala 39:24]
        reg[14] <= reg[15] @[ShiftRegister.scala 39:24]
        node _T = mux(io.tap, UInt<4>("h0f"), UInt<4>("h0f")) @[ShiftRegister.scala 42:36]
        reg[15] <= reg[_T] @[ShiftRegister.scala 42:26]
        skip @[ShiftRegister.scala 37:23]
      else : @[ShiftRegister.scala 43:22]
        reg[1] <= reg[0] @[ShiftRegister.scala 45:26]
        reg[2] <= reg[1] @[ShiftRegister.scala 45:26]
        reg[3] <= reg[2] @[ShiftRegister.scala 45:26]
        reg[4] <= reg[3] @[ShiftRegister.scala 45:26]
        reg[5] <= reg[4] @[ShiftRegister.scala 45:26]
        reg[6] <= reg[5] @[ShiftRegister.scala 45:26]
        reg[7] <= reg[6] @[ShiftRegister.scala 45:26]
        reg[8] <= reg[7] @[ShiftRegister.scala 45:26]
        reg[9] <= reg[8] @[ShiftRegister.scala 45:26]
        reg[10] <= reg[9] @[ShiftRegister.scala 45:26]
        reg[11] <= reg[10] @[ShiftRegister.scala 45:26]
        reg[12] <= reg[11] @[ShiftRegister.scala 45:26]
        reg[13] <= reg[12] @[ShiftRegister.scala 45:26]
        reg[14] <= reg[13] @[ShiftRegister.scala 45:26]
        reg[15] <= reg[14] @[ShiftRegister.scala 45:26]
        when io.cyc : @[ShiftRegister.scala 48:27]
          node _T_1 = mux(io.tap, UInt<4>("h0f"), UInt<4>("h0f")) @[ShiftRegister.scala 48:36]
          reg[_T_1] <= reg[15] @[ShiftRegister.scala 48:62]
          skip @[ShiftRegister.scala 48:27]
        else : @[ShiftRegister.scala 49:28]
          reg[0] <= io.input @[ShiftRegister.scala 49:37]
          skip @[ShiftRegister.scala 49:28]
        skip @[ShiftRegister.scala 43:22]
      skip @[ShiftRegister.scala 36:22]
    io.output[0] <= reg[0] @[ShiftRegister.scala 53:15]
    io.output[1] <= reg[1] @[ShiftRegister.scala 53:15]
    io.output[2] <= reg[2] @[ShiftRegister.scala 53:15]
    io.output[3] <= reg[3] @[ShiftRegister.scala 53:15]
    io.output[4] <= reg[4] @[ShiftRegister.scala 53:15]
    io.output[5] <= reg[5] @[ShiftRegister.scala 53:15]
    io.output[6] <= reg[6] @[ShiftRegister.scala 53:15]
    io.output[7] <= reg[7] @[ShiftRegister.scala 53:15]
    io.output[8] <= reg[8] @[ShiftRegister.scala 53:15]
    io.output[9] <= reg[9] @[ShiftRegister.scala 53:15]
    io.output[10] <= reg[10] @[ShiftRegister.scala 53:15]
    io.output[11] <= reg[11] @[ShiftRegister.scala 53:15]
    io.output[12] <= reg[12] @[ShiftRegister.scala 53:15]
    io.output[13] <= reg[13] @[ShiftRegister.scala 53:15]
    io.output[14] <= reg[14] @[ShiftRegister.scala 53:15]
    io.output[15] <= reg[15] @[ShiftRegister.scala 53:15]
    
  module MessageScheduleArray : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<1>, flip shiftIn : UInt<1>, flip wordIn : UInt<32>, wOut : UInt<32>}
    
    reg iReg : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[MessageScheduleArray.scala 32:23]
    wire i : UInt<6> @[MessageScheduleArray.scala 33:17]
    wire outWire : UInt<32> @[MessageScheduleArray.scala 35:23]
    reg out : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[MessageScheduleArray.scala 36:22]
    io.wOut <= out @[MessageScheduleArray.scala 37:13]
    out <= outWire @[MessageScheduleArray.scala 38:9]
    when io.first : @[MessageScheduleArray.scala 40:21]
      i <= UInt<1>("h00") @[MessageScheduleArray.scala 41:11]
      iReg <= UInt<1>("h00") @[MessageScheduleArray.scala 42:14]
      skip @[MessageScheduleArray.scala 40:21]
    else : @[MessageScheduleArray.scala 43:30]
      when io.shiftIn : @[MessageScheduleArray.scala 43:30]
        node _T = add(iReg, UInt<1>("h01")) @[MessageScheduleArray.scala 44:19]
        node _T_1 = tail(_T, 1) @[MessageScheduleArray.scala 44:19]
        i <= _T_1 @[MessageScheduleArray.scala 44:11]
        node _T_2 = add(iReg, UInt<1>("h01")) @[MessageScheduleArray.scala 45:22]
        node _T_3 = tail(_T_2, 1) @[MessageScheduleArray.scala 45:22]
        iReg <= _T_3 @[MessageScheduleArray.scala 45:14]
        skip @[MessageScheduleArray.scala 43:30]
      else : @[MessageScheduleArray.scala 46:18]
        i <= iReg @[MessageScheduleArray.scala 47:11]
        skip @[MessageScheduleArray.scala 46:18]
    inst shreg of ShiftRegister @[MessageScheduleArray.scala 50:23]
    shreg.clock <= clock
    shreg.reset <= reset
    shreg.io.rev <= UInt<1>("h00") @[MessageScheduleArray.scala 51:18]
    shreg.io.cyc <= UInt<1>("h00") @[MessageScheduleArray.scala 52:18]
    shreg.io.tap <= UInt<1>("h00") @[MessageScheduleArray.scala 53:18]
    shreg.io.enable <= io.shiftIn @[MessageScheduleArray.scala 55:21]
    shreg.io.input <= outWire @[MessageScheduleArray.scala 56:20]
    outWire <= UInt<1>("h00") @[MessageScheduleArray.scala 58:13]
    when io.shiftIn : @[MessageScheduleArray.scala 59:23]
      node _T_4 = lt(i, UInt<5>("h010")) @[MessageScheduleArray.scala 60:17]
      when _T_4 : @[MessageScheduleArray.scala 60:25]
        outWire <= io.wordIn @[MessageScheduleArray.scala 61:21]
        skip @[MessageScheduleArray.scala 60:25]
      else : @[MessageScheduleArray.scala 62:22]
        node _T_5 = bits(shreg.io.output[14], 6, 0) @[RotateLeft.scala 24:25]
        node _T_6 = shr(shreg.io.output[14], 7) @[RotateLeft.scala 24:48]
        node _T_7 = cat(_T_5, _T_6) @[RotateLeft.scala 24:38]
        node _T_8 = bits(shreg.io.output[14], 17, 0) @[RotateLeft.scala 24:25]
        node _T_9 = shr(shreg.io.output[14], 18) @[RotateLeft.scala 24:48]
        node _T_10 = cat(_T_8, _T_9) @[RotateLeft.scala 24:38]
        node _T_11 = xor(_T_7, _T_10) @[MessageScheduleArray.scala 63:58]
        node _T_12 = shr(shreg.io.output[14], 3) @[MessageScheduleArray.scala 63:120]
        node _T_13 = xor(_T_11, _T_12) @[MessageScheduleArray.scala 63:97]
        node _T_14 = bits(shreg.io.output[1], 16, 0) @[RotateLeft.scala 24:25]
        node _T_15 = shr(shreg.io.output[1], 17) @[RotateLeft.scala 24:48]
        node _T_16 = cat(_T_14, _T_15) @[RotateLeft.scala 24:38]
        node _T_17 = bits(shreg.io.output[1], 18, 0) @[RotateLeft.scala 24:25]
        node _T_18 = shr(shreg.io.output[1], 19) @[RotateLeft.scala 24:48]
        node _T_19 = cat(_T_17, _T_18) @[RotateLeft.scala 24:38]
        node _T_20 = xor(_T_16, _T_19) @[MessageScheduleArray.scala 64:58]
        node _T_21 = shr(shreg.io.output[1], 10) @[MessageScheduleArray.scala 64:118]
        node _T_22 = xor(_T_20, _T_21) @[MessageScheduleArray.scala 64:96]
        node _T_23 = add(shreg.io.output[15], _T_13) @[MessageScheduleArray.scala 65:44]
        node _T_24 = tail(_T_23, 1) @[MessageScheduleArray.scala 65:44]
        node _T_25 = add(_T_24, shreg.io.output[6]) @[MessageScheduleArray.scala 65:49]
        node _T_26 = tail(_T_25, 1) @[MessageScheduleArray.scala 65:49]
        node _T_27 = add(_T_26, _T_22) @[MessageScheduleArray.scala 65:70]
        node _T_28 = tail(_T_27, 1) @[MessageScheduleArray.scala 65:70]
        outWire <= _T_28 @[MessageScheduleArray.scala 65:21]
        skip @[MessageScheduleArray.scala 62:22]
      skip @[MessageScheduleArray.scala 59:23]
    
  module CompressionFunction : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<1>, flip newChunk : UInt<1>, flip shiftIn : UInt<1>, flip wordIn : UInt<32>, valid : UInt<1>, out : UInt<32>[8]}
    
    reg valid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[CompressionFunction.scala 32:24]
    io.valid <= valid @[CompressionFunction.scala 33:14]
    reg i : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[CompressionFunction.scala 35:20]
    wire _T : UInt<32>[8] @[Constants.scala 21:16]
    _T[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
    _T[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
    _T[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
    _T[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
    _T[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
    _T[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
    _T[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
    _T[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
    reg hash_val : UInt<32>[8], clock with : (reset => (reset, _T)) @[CompressionFunction.scala 37:27]
    io.out[0] <= hash_val[0] @[CompressionFunction.scala 38:12]
    io.out[1] <= hash_val[1] @[CompressionFunction.scala 38:12]
    io.out[2] <= hash_val[2] @[CompressionFunction.scala 38:12]
    io.out[3] <= hash_val[3] @[CompressionFunction.scala 38:12]
    io.out[4] <= hash_val[4] @[CompressionFunction.scala 38:12]
    io.out[5] <= hash_val[5] @[CompressionFunction.scala 38:12]
    io.out[6] <= hash_val[6] @[CompressionFunction.scala 38:12]
    io.out[7] <= hash_val[7] @[CompressionFunction.scala 38:12]
    wire _T_1 : UInt<32>[8] @[Constants.scala 21:16]
    _T_1[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
    _T_1[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
    _T_1[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
    _T_1[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
    _T_1[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
    _T_1[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
    _T_1[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
    _T_1[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
    reg a : UInt, clock with : (reset => (reset, _T_1[0])) @[CompressionFunction.scala 40:20]
    wire _T_2 : UInt<32>[8] @[Constants.scala 21:16]
    _T_2[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
    _T_2[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
    _T_2[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
    _T_2[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
    _T_2[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
    _T_2[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
    _T_2[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
    _T_2[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
    reg b : UInt, clock with : (reset => (reset, _T_2[1])) @[CompressionFunction.scala 41:20]
    wire _T_3 : UInt<32>[8] @[Constants.scala 21:16]
    _T_3[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
    _T_3[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
    _T_3[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
    _T_3[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
    _T_3[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
    _T_3[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
    _T_3[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
    _T_3[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
    reg c : UInt, clock with : (reset => (reset, _T_3[2])) @[CompressionFunction.scala 42:20]
    wire _T_4 : UInt<32>[8] @[Constants.scala 21:16]
    _T_4[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
    _T_4[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
    _T_4[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
    _T_4[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
    _T_4[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
    _T_4[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
    _T_4[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
    _T_4[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
    reg d : UInt, clock with : (reset => (reset, _T_4[3])) @[CompressionFunction.scala 43:20]
    wire _T_5 : UInt<32>[8] @[Constants.scala 21:16]
    _T_5[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
    _T_5[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
    _T_5[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
    _T_5[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
    _T_5[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
    _T_5[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
    _T_5[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
    _T_5[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
    reg e : UInt, clock with : (reset => (reset, _T_5[4])) @[CompressionFunction.scala 44:20]
    wire _T_6 : UInt<32>[8] @[Constants.scala 21:16]
    _T_6[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
    _T_6[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
    _T_6[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
    _T_6[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
    _T_6[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
    _T_6[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
    _T_6[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
    _T_6[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
    reg f : UInt, clock with : (reset => (reset, _T_6[5])) @[CompressionFunction.scala 45:20]
    wire _T_7 : UInt<32>[8] @[Constants.scala 21:16]
    _T_7[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
    _T_7[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
    _T_7[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
    _T_7[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
    _T_7[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
    _T_7[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
    _T_7[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
    _T_7[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
    reg g : UInt, clock with : (reset => (reset, _T_7[6])) @[CompressionFunction.scala 46:20]
    wire _T_8 : UInt<32>[8] @[Constants.scala 21:16]
    _T_8[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
    _T_8[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
    _T_8[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
    _T_8[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
    _T_8[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
    _T_8[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
    _T_8[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
    _T_8[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
    reg h : UInt, clock with : (reset => (reset, _T_8[7])) @[CompressionFunction.scala 47:20]
    inst messageScheduleArray of MessageScheduleArray @[CompressionFunction.scala 49:38]
    messageScheduleArray.clock <= clock
    messageScheduleArray.reset <= reset
    node _T_9 = or(io.first, io.newChunk) @[CompressionFunction.scala 50:47]
    messageScheduleArray.io.first <= _T_9 @[CompressionFunction.scala 50:35]
    messageScheduleArray.io.shiftIn <= io.shiftIn @[CompressionFunction.scala 51:37]
    messageScheduleArray.io.wordIn <= io.wordIn @[CompressionFunction.scala 52:36]
    reg first : UInt<1>, clock @[CompressionFunction.scala 55:24]
    first <= io.first @[CompressionFunction.scala 55:24]
    reg newChunk : UInt<1>, clock @[CompressionFunction.scala 56:27]
    newChunk <= io.newChunk @[CompressionFunction.scala 56:27]
    reg shiftIn : UInt<1>, clock @[CompressionFunction.scala 57:26]
    shiftIn <= io.shiftIn @[CompressionFunction.scala 57:26]
    node _T_10 = or(io.first, io.newChunk) @[CompressionFunction.scala 59:20]
    when _T_10 : @[CompressionFunction.scala 59:35]
      valid <= UInt<1>("h00") @[CompressionFunction.scala 60:15]
      i <= UInt<1>("h00") @[CompressionFunction.scala 61:11]
      skip @[CompressionFunction.scala 59:35]
    when io.first : @[CompressionFunction.scala 64:21]
      wire _T_11 : UInt<32>[8] @[Constants.scala 21:16]
      _T_11[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
      _T_11[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
      _T_11[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
      _T_11[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
      _T_11[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
      _T_11[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
      _T_11[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
      _T_11[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
      a <= _T_11[0] @[CompressionFunction.scala 65:11]
      wire _T_12 : UInt<32>[8] @[Constants.scala 21:16]
      _T_12[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
      _T_12[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
      _T_12[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
      _T_12[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
      _T_12[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
      _T_12[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
      _T_12[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
      _T_12[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
      b <= _T_12[1] @[CompressionFunction.scala 66:11]
      wire _T_13 : UInt<32>[8] @[Constants.scala 21:16]
      _T_13[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
      _T_13[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
      _T_13[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
      _T_13[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
      _T_13[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
      _T_13[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
      _T_13[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
      _T_13[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
      c <= _T_13[2] @[CompressionFunction.scala 67:11]
      wire _T_14 : UInt<32>[8] @[Constants.scala 21:16]
      _T_14[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
      _T_14[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
      _T_14[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
      _T_14[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
      _T_14[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
      _T_14[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
      _T_14[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
      _T_14[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
      d <= _T_14[3] @[CompressionFunction.scala 68:11]
      wire _T_15 : UInt<32>[8] @[Constants.scala 21:16]
      _T_15[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
      _T_15[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
      _T_15[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
      _T_15[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
      _T_15[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
      _T_15[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
      _T_15[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
      _T_15[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
      e <= _T_15[4] @[CompressionFunction.scala 69:11]
      wire _T_16 : UInt<32>[8] @[Constants.scala 21:16]
      _T_16[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
      _T_16[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
      _T_16[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
      _T_16[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
      _T_16[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
      _T_16[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
      _T_16[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
      _T_16[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
      f <= _T_16[5] @[CompressionFunction.scala 70:11]
      wire _T_17 : UInt<32>[8] @[Constants.scala 21:16]
      _T_17[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
      _T_17[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
      _T_17[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
      _T_17[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
      _T_17[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
      _T_17[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
      _T_17[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
      _T_17[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
      g <= _T_17[6] @[CompressionFunction.scala 71:11]
      wire _T_18 : UInt<32>[8] @[Constants.scala 21:16]
      _T_18[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
      _T_18[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
      _T_18[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
      _T_18[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
      _T_18[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
      _T_18[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
      _T_18[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
      _T_18[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
      h <= _T_18[7] @[CompressionFunction.scala 72:11]
      wire _T_19 : UInt<32>[8] @[Constants.scala 21:16]
      _T_19[0] <= UInt<32>("h06a09e667") @[Constants.scala 21:16]
      _T_19[1] <= UInt<32>("h0bb67ae85") @[Constants.scala 21:16]
      _T_19[2] <= UInt<32>("h03c6ef372") @[Constants.scala 21:16]
      _T_19[3] <= UInt<32>("h0a54ff53a") @[Constants.scala 21:16]
      _T_19[4] <= UInt<32>("h0510e527f") @[Constants.scala 21:16]
      _T_19[5] <= UInt<32>("h09b05688c") @[Constants.scala 21:16]
      _T_19[6] <= UInt<32>("h01f83d9ab") @[Constants.scala 21:16]
      _T_19[7] <= UInt<32>("h05be0cd19") @[Constants.scala 21:16]
      hash_val[0] <= _T_19[0] @[CompressionFunction.scala 73:18]
      hash_val[1] <= _T_19[1] @[CompressionFunction.scala 73:18]
      hash_val[2] <= _T_19[2] @[CompressionFunction.scala 73:18]
      hash_val[3] <= _T_19[3] @[CompressionFunction.scala 73:18]
      hash_val[4] <= _T_19[4] @[CompressionFunction.scala 73:18]
      hash_val[5] <= _T_19[5] @[CompressionFunction.scala 73:18]
      hash_val[6] <= _T_19[6] @[CompressionFunction.scala 73:18]
      hash_val[7] <= _T_19[7] @[CompressionFunction.scala 73:18]
      skip @[CompressionFunction.scala 64:21]
    else : @[CompressionFunction.scala 75:31]
      when io.newChunk : @[CompressionFunction.scala 75:31]
        a <= hash_val[0] @[CompressionFunction.scala 76:11]
        b <= hash_val[1] @[CompressionFunction.scala 77:11]
        c <= hash_val[2] @[CompressionFunction.scala 78:11]
        d <= hash_val[3] @[CompressionFunction.scala 79:11]
        e <= hash_val[4] @[CompressionFunction.scala 80:11]
        f <= hash_val[5] @[CompressionFunction.scala 81:11]
        g <= hash_val[6] @[CompressionFunction.scala 82:11]
        h <= hash_val[7] @[CompressionFunction.scala 83:11]
        skip @[CompressionFunction.scala 75:31]
    when shiftIn : @[CompressionFunction.scala 86:20]
      node _T_20 = bits(e, 5, 0) @[RotateLeft.scala 24:25]
      node _T_21 = shr(e, 6) @[RotateLeft.scala 24:48]
      node _T_22 = cat(_T_20, _T_21) @[RotateLeft.scala 24:38]
      node _T_23 = bits(e, 10, 0) @[RotateLeft.scala 24:25]
      node _T_24 = shr(e, 11) @[RotateLeft.scala 24:48]
      node _T_25 = cat(_T_23, _T_24) @[RotateLeft.scala 24:38]
      node _T_26 = xor(_T_22, _T_25) @[CompressionFunction.scala 89:36]
      node _T_27 = bits(e, 24, 0) @[RotateLeft.scala 24:25]
      node _T_28 = shr(e, 25) @[RotateLeft.scala 24:48]
      node _T_29 = cat(_T_27, _T_28) @[RotateLeft.scala 24:38]
      node _T_30 = xor(_T_26, _T_29) @[CompressionFunction.scala 89:57]
      node _T_31 = and(e, f) @[CompressionFunction.scala 90:21]
      node _T_32 = not(e) @[CompressionFunction.scala 90:30]
      node _T_33 = and(_T_32, g) @[CompressionFunction.scala 90:41]
      node _T_34 = xor(_T_31, _T_33) @[CompressionFunction.scala 90:26]
      node _T_35 = add(h, _T_30) @[CompressionFunction.scala 91:23]
      node _T_36 = tail(_T_35, 1) @[CompressionFunction.scala 91:23]
      node _T_37 = add(_T_36, _T_34) @[CompressionFunction.scala 91:28]
      node _T_38 = tail(_T_37, 1) @[CompressionFunction.scala 91:28]
      wire _T_39 : UInt<32>[64] @[Constants.scala 24:16]
      _T_39[0] <= UInt<32>("h0428a2f98") @[Constants.scala 24:16]
      _T_39[1] <= UInt<32>("h071374491") @[Constants.scala 24:16]
      _T_39[2] <= UInt<32>("h0b5c0fbcf") @[Constants.scala 24:16]
      _T_39[3] <= UInt<32>("h0e9b5dba5") @[Constants.scala 24:16]
      _T_39[4] <= UInt<32>("h03956c25b") @[Constants.scala 24:16]
      _T_39[5] <= UInt<32>("h059f111f1") @[Constants.scala 24:16]
      _T_39[6] <= UInt<32>("h0923f82a4") @[Constants.scala 24:16]
      _T_39[7] <= UInt<32>("h0ab1c5ed5") @[Constants.scala 24:16]
      _T_39[8] <= UInt<32>("h0d807aa98") @[Constants.scala 24:16]
      _T_39[9] <= UInt<32>("h012835b01") @[Constants.scala 24:16]
      _T_39[10] <= UInt<32>("h0243185be") @[Constants.scala 24:16]
      _T_39[11] <= UInt<32>("h0550c7dc3") @[Constants.scala 24:16]
      _T_39[12] <= UInt<32>("h072be5d74") @[Constants.scala 24:16]
      _T_39[13] <= UInt<32>("h080deb1fe") @[Constants.scala 24:16]
      _T_39[14] <= UInt<32>("h09bdc06a7") @[Constants.scala 24:16]
      _T_39[15] <= UInt<32>("h0c19bf174") @[Constants.scala 24:16]
      _T_39[16] <= UInt<32>("h0e49b69c1") @[Constants.scala 24:16]
      _T_39[17] <= UInt<32>("h0efbe4786") @[Constants.scala 24:16]
      _T_39[18] <= UInt<32>("h0fc19dc6") @[Constants.scala 24:16]
      _T_39[19] <= UInt<32>("h0240ca1cc") @[Constants.scala 24:16]
      _T_39[20] <= UInt<32>("h02de92c6f") @[Constants.scala 24:16]
      _T_39[21] <= UInt<32>("h04a7484aa") @[Constants.scala 24:16]
      _T_39[22] <= UInt<32>("h05cb0a9dc") @[Constants.scala 24:16]
      _T_39[23] <= UInt<32>("h076f988da") @[Constants.scala 24:16]
      _T_39[24] <= UInt<32>("h0983e5152") @[Constants.scala 24:16]
      _T_39[25] <= UInt<32>("h0a831c66d") @[Constants.scala 24:16]
      _T_39[26] <= UInt<32>("h0b00327c8") @[Constants.scala 24:16]
      _T_39[27] <= UInt<32>("h0bf597fc7") @[Constants.scala 24:16]
      _T_39[28] <= UInt<32>("h0c6e00bf3") @[Constants.scala 24:16]
      _T_39[29] <= UInt<32>("h0d5a79147") @[Constants.scala 24:16]
      _T_39[30] <= UInt<32>("h06ca6351") @[Constants.scala 24:16]
      _T_39[31] <= UInt<32>("h014292967") @[Constants.scala 24:16]
      _T_39[32] <= UInt<32>("h027b70a85") @[Constants.scala 24:16]
      _T_39[33] <= UInt<32>("h02e1b2138") @[Constants.scala 24:16]
      _T_39[34] <= UInt<32>("h04d2c6dfc") @[Constants.scala 24:16]
      _T_39[35] <= UInt<32>("h053380d13") @[Constants.scala 24:16]
      _T_39[36] <= UInt<32>("h0650a7354") @[Constants.scala 24:16]
      _T_39[37] <= UInt<32>("h0766a0abb") @[Constants.scala 24:16]
      _T_39[38] <= UInt<32>("h081c2c92e") @[Constants.scala 24:16]
      _T_39[39] <= UInt<32>("h092722c85") @[Constants.scala 24:16]
      _T_39[40] <= UInt<32>("h0a2bfe8a1") @[Constants.scala 24:16]
      _T_39[41] <= UInt<32>("h0a81a664b") @[Constants.scala 24:16]
      _T_39[42] <= UInt<32>("h0c24b8b70") @[Constants.scala 24:16]
      _T_39[43] <= UInt<32>("h0c76c51a3") @[Constants.scala 24:16]
      _T_39[44] <= UInt<32>("h0d192e819") @[Constants.scala 24:16]
      _T_39[45] <= UInt<32>("h0d6990624") @[Constants.scala 24:16]
      _T_39[46] <= UInt<32>("h0f40e3585") @[Constants.scala 24:16]
      _T_39[47] <= UInt<32>("h0106aa070") @[Constants.scala 24:16]
      _T_39[48] <= UInt<32>("h019a4c116") @[Constants.scala 24:16]
      _T_39[49] <= UInt<32>("h01e376c08") @[Constants.scala 24:16]
      _T_39[50] <= UInt<32>("h02748774c") @[Constants.scala 24:16]
      _T_39[51] <= UInt<32>("h034b0bcb5") @[Constants.scala 24:16]
      _T_39[52] <= UInt<32>("h0391c0cb3") @[Constants.scala 24:16]
      _T_39[53] <= UInt<32>("h04ed8aa4a") @[Constants.scala 24:16]
      _T_39[54] <= UInt<32>("h05b9cca4f") @[Constants.scala 24:16]
      _T_39[55] <= UInt<32>("h0682e6ff3") @[Constants.scala 24:16]
      _T_39[56] <= UInt<32>("h0748f82ee") @[Constants.scala 24:16]
      _T_39[57] <= UInt<32>("h078a5636f") @[Constants.scala 24:16]
      _T_39[58] <= UInt<32>("h084c87814") @[Constants.scala 24:16]
      _T_39[59] <= UInt<32>("h08cc70208") @[Constants.scala 24:16]
      _T_39[60] <= UInt<32>("h090befffa") @[Constants.scala 24:16]
      _T_39[61] <= UInt<32>("h0a4506ceb") @[Constants.scala 24:16]
      _T_39[62] <= UInt<32>("h0bef9a3f7") @[Constants.scala 24:16]
      _T_39[63] <= UInt<32>("h0c67178f2") @[Constants.scala 24:16]
      node _T_40 = add(_T_38, _T_39[i]) @[CompressionFunction.scala 91:33]
      node _T_41 = tail(_T_40, 1) @[CompressionFunction.scala 91:33]
      node _T_42 = add(_T_41, messageScheduleArray.io.wOut) @[CompressionFunction.scala 91:69]
      node _T_43 = tail(_T_42, 1) @[CompressionFunction.scala 91:69]
      node _T_44 = bits(a, 1, 0) @[RotateLeft.scala 24:25]
      node _T_45 = shr(a, 2) @[RotateLeft.scala 24:48]
      node _T_46 = cat(_T_44, _T_45) @[RotateLeft.scala 24:38]
      node _T_47 = bits(a, 12, 0) @[RotateLeft.scala 24:25]
      node _T_48 = shr(a, 13) @[RotateLeft.scala 24:48]
      node _T_49 = cat(_T_47, _T_48) @[RotateLeft.scala 24:38]
      node _T_50 = xor(_T_46, _T_49) @[CompressionFunction.scala 92:36]
      node _T_51 = bits(a, 21, 0) @[RotateLeft.scala 24:25]
      node _T_52 = shr(a, 22) @[RotateLeft.scala 24:48]
      node _T_53 = cat(_T_51, _T_52) @[RotateLeft.scala 24:38]
      node _T_54 = xor(_T_50, _T_53) @[CompressionFunction.scala 92:57]
      node _T_55 = and(a, b) @[CompressionFunction.scala 93:22]
      node _T_56 = and(a, c) @[CompressionFunction.scala 93:32]
      node _T_57 = xor(_T_55, _T_56) @[CompressionFunction.scala 93:27]
      node _T_58 = and(b, c) @[CompressionFunction.scala 93:42]
      node _T_59 = xor(_T_57, _T_58) @[CompressionFunction.scala 93:37]
      node _T_60 = add(_T_54, _T_59) @[CompressionFunction.scala 94:24]
      node _T_61 = tail(_T_60, 1) @[CompressionFunction.scala 94:24]
      h <= g @[CompressionFunction.scala 96:11]
      g <= f @[CompressionFunction.scala 97:11]
      f <= e @[CompressionFunction.scala 98:11]
      node _T_62 = add(d, _T_43) @[CompressionFunction.scala 99:16]
      node _T_63 = tail(_T_62, 1) @[CompressionFunction.scala 99:16]
      e <= _T_63 @[CompressionFunction.scala 99:11]
      d <= c @[CompressionFunction.scala 100:11]
      c <= b @[CompressionFunction.scala 101:11]
      b <= a @[CompressionFunction.scala 102:11]
      node _T_64 = add(_T_43, _T_61) @[CompressionFunction.scala 103:20]
      node _T_65 = tail(_T_64, 1) @[CompressionFunction.scala 103:20]
      a <= _T_65 @[CompressionFunction.scala 103:11]
      node _T_66 = add(i, UInt<1>("h01")) @[CompressionFunction.scala 105:20]
      node _T_67 = tail(_T_66, 1) @[CompressionFunction.scala 105:20]
      i <= _T_67 @[CompressionFunction.scala 105:11]
      node _T_68 = eq(i, UInt<6>("h03f")) @[CompressionFunction.scala 107:17]
      when _T_68 : @[CompressionFunction.scala 107:27]
        valid <= UInt<1>("h01") @[CompressionFunction.scala 108:19]
        node _T_69 = add(_T_43, _T_61) @[CompressionFunction.scala 110:24]
        node _T_70 = tail(_T_69, 1) @[CompressionFunction.scala 110:24]
        node _T_71 = add(_T_70, hash_val[0]) @[CompressionFunction.scala 110:32]
        node _T_72 = tail(_T_71, 1) @[CompressionFunction.scala 110:32]
        a <= _T_72 @[CompressionFunction.scala 110:15]
        node _T_73 = add(a, hash_val[1]) @[CompressionFunction.scala 111:20]
        node _T_74 = tail(_T_73, 1) @[CompressionFunction.scala 111:20]
        b <= _T_74 @[CompressionFunction.scala 111:15]
        node _T_75 = add(b, hash_val[2]) @[CompressionFunction.scala 112:20]
        node _T_76 = tail(_T_75, 1) @[CompressionFunction.scala 112:20]
        c <= _T_76 @[CompressionFunction.scala 112:15]
        node _T_77 = add(c, hash_val[3]) @[CompressionFunction.scala 113:20]
        node _T_78 = tail(_T_77, 1) @[CompressionFunction.scala 113:20]
        d <= _T_78 @[CompressionFunction.scala 113:15]
        node _T_79 = add(d, _T_43) @[CompressionFunction.scala 114:20]
        node _T_80 = tail(_T_79, 1) @[CompressionFunction.scala 114:20]
        node _T_81 = add(_T_80, hash_val[4]) @[CompressionFunction.scala 114:28]
        node _T_82 = tail(_T_81, 1) @[CompressionFunction.scala 114:28]
        e <= _T_82 @[CompressionFunction.scala 114:15]
        node _T_83 = add(e, hash_val[5]) @[CompressionFunction.scala 115:20]
        node _T_84 = tail(_T_83, 1) @[CompressionFunction.scala 115:20]
        f <= _T_84 @[CompressionFunction.scala 115:15]
        node _T_85 = add(f, hash_val[6]) @[CompressionFunction.scala 116:20]
        node _T_86 = tail(_T_85, 1) @[CompressionFunction.scala 116:20]
        g <= _T_86 @[CompressionFunction.scala 116:15]
        node _T_87 = add(g, hash_val[7]) @[CompressionFunction.scala 117:20]
        node _T_88 = tail(_T_87, 1) @[CompressionFunction.scala 117:20]
        h <= _T_88 @[CompressionFunction.scala 117:15]
        node _T_89 = add(hash_val[0], _T_43) @[CompressionFunction.scala 119:40]
        node _T_90 = tail(_T_89, 1) @[CompressionFunction.scala 119:40]
        node _T_91 = add(_T_90, _T_61) @[CompressionFunction.scala 119:48]
        node _T_92 = tail(_T_91, 1) @[CompressionFunction.scala 119:48]
        hash_val[0] <= _T_92 @[CompressionFunction.scala 119:25]
        node _T_93 = add(hash_val[1], a) @[CompressionFunction.scala 120:40]
        node _T_94 = tail(_T_93, 1) @[CompressionFunction.scala 120:40]
        hash_val[1] <= _T_94 @[CompressionFunction.scala 120:25]
        node _T_95 = add(hash_val[2], b) @[CompressionFunction.scala 121:40]
        node _T_96 = tail(_T_95, 1) @[CompressionFunction.scala 121:40]
        hash_val[2] <= _T_96 @[CompressionFunction.scala 121:25]
        node _T_97 = add(hash_val[3], c) @[CompressionFunction.scala 122:40]
        node _T_98 = tail(_T_97, 1) @[CompressionFunction.scala 122:40]
        hash_val[3] <= _T_98 @[CompressionFunction.scala 122:25]
        node _T_99 = add(hash_val[4], d) @[CompressionFunction.scala 123:40]
        node _T_100 = tail(_T_99, 1) @[CompressionFunction.scala 123:40]
        node _T_101 = add(_T_100, _T_43) @[CompressionFunction.scala 123:44]
        node _T_102 = tail(_T_101, 1) @[CompressionFunction.scala 123:44]
        hash_val[4] <= _T_102 @[CompressionFunction.scala 123:25]
        node _T_103 = add(hash_val[5], e) @[CompressionFunction.scala 124:40]
        node _T_104 = tail(_T_103, 1) @[CompressionFunction.scala 124:40]
        hash_val[5] <= _T_104 @[CompressionFunction.scala 124:25]
        node _T_105 = add(hash_val[6], f) @[CompressionFunction.scala 125:40]
        node _T_106 = tail(_T_105, 1) @[CompressionFunction.scala 125:40]
        hash_val[6] <= _T_106 @[CompressionFunction.scala 125:25]
        node _T_107 = add(hash_val[7], g) @[CompressionFunction.scala 126:40]
        node _T_108 = tail(_T_107, 1) @[CompressionFunction.scala 126:40]
        hash_val[7] <= _T_108 @[CompressionFunction.scala 126:25]
        skip @[CompressionFunction.scala 107:27]
      else : @[CompressionFunction.scala 128:22]
        valid <= UInt<1>("h00") @[CompressionFunction.scala 129:19]
        skip @[CompressionFunction.scala 128:22]
      skip @[CompressionFunction.scala 86:20]
    
  module Sha256Accel : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<1>, flip inputData : UInt<32>, flip inputValid : UInt<1>, inputReady : UInt<1>, outputData : UInt<32>[8], outputValid : UInt<1>}
    
    inst accel of CompressionFunction @[Sha256Accel.scala 35:23]
    accel.clock <= clock
    accel.reset <= reset
    io.outputData[0] <= accel.io.out[0] @[Sha256Accel.scala 36:19]
    io.outputData[1] <= accel.io.out[1] @[Sha256Accel.scala 36:19]
    io.outputData[2] <= accel.io.out[2] @[Sha256Accel.scala 36:19]
    io.outputData[3] <= accel.io.out[3] @[Sha256Accel.scala 36:19]
    io.outputData[4] <= accel.io.out[4] @[Sha256Accel.scala 36:19]
    io.outputData[5] <= accel.io.out[5] @[Sha256Accel.scala 36:19]
    io.outputData[6] <= accel.io.out[6] @[Sha256Accel.scala 36:19]
    io.outputData[7] <= accel.io.out[7] @[Sha256Accel.scala 36:19]
    io.outputValid <= accel.io.valid @[Sha256Accel.scala 37:20]
    reg first : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[Sha256Accel.scala 39:24]
    when io.first : @[Sha256Accel.scala 40:21]
      first <= UInt<1>("h01") @[Sha256Accel.scala 40:29]
      skip @[Sha256Accel.scala 40:21]
    when accel.io.shiftIn : @[Sha256Accel.scala 41:29]
      first <= UInt<1>("h00") @[Sha256Accel.scala 41:37]
      skip @[Sha256Accel.scala 41:29]
    reg ctr : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Sha256Accel.scala 43:22]
    node _T = eq(ctr, UInt<1>("h00")) @[Sha256Accel.scala 44:31]
    node _T_1 = and(_T, accel.io.shiftIn) @[Sha256Accel.scala 44:40]
    accel.io.newChunk <= _T_1 @[Sha256Accel.scala 44:23]
    node _T_2 = and(first, accel.io.shiftIn) @[Sha256Accel.scala 45:29]
    accel.io.first <= _T_2 @[Sha256Accel.scala 45:20]
    accel.io.shiftIn <= UInt<1>("h00") @[Sha256Accel.scala 47:22]
    accel.io.wordIn <= io.inputData @[Sha256Accel.scala 48:21]
    reg _T_3 : UInt, clock @[Sha256Accel.scala 49:30]
    _T_3 <= ctr @[Sha256Accel.scala 49:30]
    node _T_4 = lt(_T_3, UInt<5>("h010")) @[Sha256Accel.scala 49:36]
    node _T_5 = lt(ctr, UInt<5>("h010")) @[Sha256Accel.scala 49:52]
    node _T_6 = and(_T_4, _T_5) @[Sha256Accel.scala 49:44]
    node _T_7 = eq(io.first, UInt<1>("h00")) @[Sha256Accel.scala 49:63]
    node _T_8 = and(_T_6, _T_7) @[Sha256Accel.scala 49:60]
    io.inputReady <= _T_8 @[Sha256Accel.scala 49:19]
    node _T_9 = geq(ctr, UInt<5>("h010")) @[Sha256Accel.scala 50:15]
    when _T_9 : @[Sha256Accel.scala 50:24]
      io.inputReady <= UInt<1>("h00") @[Sha256Accel.scala 51:23]
      accel.io.shiftIn <= UInt<1>("h01") @[Sha256Accel.scala 52:26]
      node _T_10 = add(ctr, UInt<1>("h01")) @[Sha256Accel.scala 54:20]
      node _T_11 = tail(_T_10, 1) @[Sha256Accel.scala 54:20]
      ctr <= _T_11 @[Sha256Accel.scala 54:13]
      node _T_12 = eq(ctr, UInt<6>("h03f")) @[Sha256Accel.scala 55:19]
      when _T_12 : @[Sha256Accel.scala 55:29]
        ctr <= UInt<1>("h00") @[Sha256Accel.scala 55:35]
        skip @[Sha256Accel.scala 55:29]
      skip @[Sha256Accel.scala 50:24]
    else : @[Sha256Accel.scala 56:33]
      when io.inputValid : @[Sha256Accel.scala 56:33]
        accel.io.shiftIn <= UInt<1>("h01") @[Sha256Accel.scala 57:26]
        node _T_13 = add(ctr, UInt<1>("h01")) @[Sha256Accel.scala 58:20]
        node _T_14 = tail(_T_13, 1) @[Sha256Accel.scala 58:20]
        ctr <= _T_14 @[Sha256Accel.scala 58:13]
        skip @[Sha256Accel.scala 56:33]
    when io.first : @[Sha256Accel.scala 61:21]
      ctr <= UInt<1>("h00") @[Sha256Accel.scala 61:27]
      skip @[Sha256Accel.scala 61:21]
    
  module Sha256Wishbone : 
    input clock : Clock
    input reset : UInt<1>
    output io : {bus : {flip cyc : UInt<1>, flip stb : UInt<1>, flip we : UInt<1>, flip sel : UInt<4>, flip addr : UInt<32>, flip data_wr : UInt<32>, ack : UInt<1>, err : UInt<1>, data_rd : UInt<32>}}
    
    reg data_rd : UInt<32>, clock @[Sha256Wishbone.scala 47:22]
    io.bus.data_rd <= data_rd @[Sha256Wishbone.scala 48:20]
    reg ack : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Sha256Wishbone.scala 50:22]
    io.bus.ack <= ack @[Sha256Wishbone.scala 51:16]
    io.bus.err <= UInt<1>("h00") @[Sha256Wishbone.scala 52:16]
    inst accel of Sha256Accel @[Sha256Wishbone.scala 54:23]
    accel.clock <= clock
    accel.reset <= reset
    accel.io.inputValid <= UInt<1>("h00") @[Sha256Wishbone.scala 56:25]
    accel.io.inputData <= io.bus.data_wr @[Sha256Wishbone.scala 57:24]
    accel.io.first <= UInt<1>("h00") @[Sha256Wishbone.scala 58:20]
    ack <= UInt<1>("h00") @[Sha256Wishbone.scala 60:9]
    node _T = and(io.bus.cyc, io.bus.stb) @[Sha256Wishbone.scala 61:21]
    node _T_1 = eq(io.bus.ack, UInt<1>("h00")) @[Sha256Wishbone.scala 61:38]
    node _T_2 = and(_T, _T_1) @[Sha256Wishbone.scala 61:35]
    when _T_2 : @[Sha256Wishbone.scala 61:51]
      data_rd <= UInt<32>("h00") @[Sha256Wishbone.scala 63:17]
      node _T_3 = shr(io.bus.addr, 2) @[Sha256Wishbone.scala 64:28]
      node _T_4 = eq(UInt<1>("h00"), _T_3) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 40:58]
        node _T_5 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 65:70]
        node _T_6 = bits(accel.io.inputReady, 0, 0) @[Sha256Wishbone.scala 65:94]
        node _T_7 = cat(_T_6, UInt<1>("h00")) @[Cat.scala 29:58]
        node _T_8 = cat(UInt<29>("h00"), _T_5) @[Cat.scala 29:58]
        node _T_9 = cat(_T_8, _T_7) @[Cat.scala 29:58]
        data_rd <= _T_9 @[Sha256Wishbone.scala 65:32]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_10 = eq(UInt<3>("h04"), _T_3) @[Conditional.scala 37:30]
        when _T_10 : @[Conditional.scala 39:67]
          node _T_11 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 69:59]
          node _T_12 = mux(_T_11, accel.io.outputData[0], UInt<32>("h00")) @[Sha256Wishbone.scala 69:38]
          data_rd <= _T_12 @[Sha256Wishbone.scala 69:32]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_13 = eq(UInt<3>("h05"), _T_3) @[Conditional.scala 37:30]
          when _T_13 : @[Conditional.scala 39:67]
            node _T_14 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 70:59]
            node _T_15 = mux(_T_14, accel.io.outputData[1], UInt<32>("h00")) @[Sha256Wishbone.scala 70:38]
            data_rd <= _T_15 @[Sha256Wishbone.scala 70:32]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_16 = eq(UInt<3>("h06"), _T_3) @[Conditional.scala 37:30]
            when _T_16 : @[Conditional.scala 39:67]
              node _T_17 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 71:59]
              node _T_18 = mux(_T_17, accel.io.outputData[2], UInt<32>("h00")) @[Sha256Wishbone.scala 71:38]
              data_rd <= _T_18 @[Sha256Wishbone.scala 71:32]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_19 = eq(UInt<3>("h07"), _T_3) @[Conditional.scala 37:30]
              when _T_19 : @[Conditional.scala 39:67]
                node _T_20 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 72:59]
                node _T_21 = mux(_T_20, accel.io.outputData[3], UInt<32>("h00")) @[Sha256Wishbone.scala 72:38]
                data_rd <= _T_21 @[Sha256Wishbone.scala 72:32]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_22 = eq(UInt<4>("h08"), _T_3) @[Conditional.scala 37:30]
                when _T_22 : @[Conditional.scala 39:67]
                  node _T_23 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 73:59]
                  node _T_24 = mux(_T_23, accel.io.outputData[4], UInt<32>("h00")) @[Sha256Wishbone.scala 73:38]
                  data_rd <= _T_24 @[Sha256Wishbone.scala 73:32]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_25 = eq(UInt<4>("h09"), _T_3) @[Conditional.scala 37:30]
                  when _T_25 : @[Conditional.scala 39:67]
                    node _T_26 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 74:59]
                    node _T_27 = mux(_T_26, accel.io.outputData[5], UInt<32>("h00")) @[Sha256Wishbone.scala 74:38]
                    data_rd <= _T_27 @[Sha256Wishbone.scala 74:32]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_28 = eq(UInt<4>("h0a"), _T_3) @[Conditional.scala 37:30]
                    when _T_28 : @[Conditional.scala 39:67]
                      node _T_29 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 75:59]
                      node _T_30 = mux(_T_29, accel.io.outputData[6], UInt<32>("h00")) @[Sha256Wishbone.scala 75:38]
                      data_rd <= _T_30 @[Sha256Wishbone.scala 75:32]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_31 = eq(UInt<4>("h0b"), _T_3) @[Conditional.scala 37:30]
                      when _T_31 : @[Conditional.scala 39:67]
                        node _T_32 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 76:59]
                        node _T_33 = mux(_T_32, accel.io.outputData[7], UInt<32>("h00")) @[Sha256Wishbone.scala 76:38]
                        data_rd <= _T_33 @[Sha256Wishbone.scala 76:32]
                        skip @[Conditional.scala 39:67]
      node _T_34 = shr(io.bus.addr, 2) @[Sha256Wishbone.scala 80:31]
      node _T_35 = eq(_T_34, UInt<5>("h014")) @[Sha256Wishbone.scala 80:44]
      when _T_35 : @[Sha256Wishbone.scala 80:60]
        data_rd <= UInt<32>("h032414853") @[Sha256Wishbone.scala 81:25]
        skip @[Sha256Wishbone.scala 80:60]
      node _T_36 = shr(io.bus.addr, 2) @[Sha256Wishbone.scala 80:31]
      node _T_37 = eq(_T_36, UInt<5>("h015")) @[Sha256Wishbone.scala 80:44]
      when _T_37 : @[Sha256Wishbone.scala 80:60]
        data_rd <= UInt<32>("h043203635") @[Sha256Wishbone.scala 81:25]
        skip @[Sha256Wishbone.scala 80:60]
      node _T_38 = shr(io.bus.addr, 2) @[Sha256Wishbone.scala 80:31]
      node _T_39 = eq(_T_38, UInt<5>("h016")) @[Sha256Wishbone.scala 80:44]
      when _T_39 : @[Sha256Wishbone.scala 80:60]
        data_rd <= UInt<32>("h065726f") @[Sha256Wishbone.scala 81:25]
        skip @[Sha256Wishbone.scala 80:60]
      ack <= UInt<1>("h01") @[Sha256Wishbone.scala 85:13]
      when io.bus.we : @[Sha256Wishbone.scala 86:25]
        node _T_40 = shr(io.bus.addr, 2) @[Sha256Wishbone.scala 88:32]
        node _T_41 = eq(UInt<1>("h00"), _T_40) @[Conditional.scala 37:30]
        when _T_41 : @[Conditional.scala 40:58]
          node _T_42 = bits(io.bus.sel, 0, 0) @[Sha256Wishbone.scala 90:37]
          node _T_43 = bits(io.bus.data_wr, 0, 0) @[Sha256Wishbone.scala 90:58]
          node _T_44 = and(_T_42, _T_43) @[Sha256Wishbone.scala 90:41]
          when _T_44 : @[Sha256Wishbone.scala 90:63]
            accel.io.first <= UInt<1>("h01") @[Sha256Wishbone.scala 91:40]
            skip @[Sha256Wishbone.scala 90:63]
          skip @[Conditional.scala 40:58]
        else : @[Conditional.scala 39:67]
          node _T_45 = eq(UInt<1>("h01"), _T_40) @[Conditional.scala 37:30]
          when _T_45 : @[Conditional.scala 39:67]
            when accel.io.inputReady : @[Sha256Wishbone.scala 97:48]
              accel.io.inputValid <= UInt<1>("h01") @[Sha256Wishbone.scala 98:45]
              skip @[Sha256Wishbone.scala 97:48]
            else : @[Sha256Wishbone.scala 99:34]
              ack <= UInt<1>("h00") @[Sha256Wishbone.scala 101:29]
              skip @[Sha256Wishbone.scala 99:34]
            skip @[Conditional.scala 39:67]
        skip @[Sha256Wishbone.scala 86:25]
      skip @[Sha256Wishbone.scala 61:51]
    
